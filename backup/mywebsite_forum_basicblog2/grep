import os
from flask import Flask
from models import User
from database import db

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(os.path.dirname(os.path.abspath(__file__)), 'instance', 'climate_forum.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db.init_app(app)

def set_admin(email):
    with app.app_context():
        user = User.query.filter_by(email=email).first()
        if user:
            user.admin = True
            db.session.commit()
            print(f"User with email '{email}' is now an admin.")
        else:
            print(f"No user found with email '{email}'.")

if __name__ == "__main__":
    set_admin("a.sengupta@unsw.edu.au")

from flask import Flask, render_template
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import models
from database import db
from flask import Flask, render_template, url_for, flash, redirect, request, abort
from forms import RegistrationForm, LoginForm, UpdateAccountForm
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask import session
from models import User, Question, Answer
#from forms import RegistrationForm, LoginForm, UpdateAccountForm, QuestionForm, AnswerForm, UpdatePasswordForm
from forms import RegistrationForm, LoginForm, UpdateAccountForm, UpdatePasswordForm
from flask_bcrypt import Bcrypt



app = Flask(__name__)
bcrypt = Bcrypt(app)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///climate_forum.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'mysecretkeystring'

db.init_app(app)
migrate = Migrate(app, db)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'


@app.route('/')
def home():
    return render_template('index.html')

@app.route('/climate-model-forum')
def climate_model_forum():
    questions = Question.query.order_by(Question.date_posted.desc()).all()
    return render_template('climate_model_forum.html', questions=questions)

@app.route('/climate-model-forum/question/<int:question_id>')
def question(question_id):
    question = models.Question.query.get_or_404(question_id)
    answers = models.Answer.query.filter_by(question_id=question_id).order_by(models.Answer.date_posted.desc()).all()
    return render_template('question.html', question=question, answers=answers)


@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user = User(username=form.username.data, email=form.email.data, password=hashed_password, profile=form.profile.data, notifications=form.notifications.data)
        db.session.add(user)
        db.session.commit()
        flash(f'Account created for {form.username.data}!', 'success')
        login_user(user)
        return redirect(url_for('climate_model_forum'))
    return render_template('register.html', title='Register', form=form)

@app.route("/login", methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password, form.password.data):
            login_user(user)
            flash('Logged in successfully.', 'success')
            return redirect(url_for('climate_model_forum'))
        else:
            flash('Login failed. Check your email and password.', 'danger')
    return render_template('login.html', title='Login', form=form)


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route("/logout")
@login_required
def logout():
    logout_user()
    flash("You have been logged out.", "success")
    return redirect(url_for("home"))

@app.route('/climate-model-forum/add-question', methods=['GET', 'POST'])
@login_required
def add_question():
    if request.method == 'POST':
        title = request.form['title']
        content = request.form['content']
        user_id = current_user.id
        question = Question(title=title, content=content, user_id=user_id)
        db.session.add(question)
        db.session.commit()
        return redirect(url_for('climate_model_forum'))
    return render_template('add_question.html')

@app.route('/climate-model-forum/question/<int:question_id>/add-response', methods=['POST'])
@login_required
def add_response(question_id):
    question = Question.query.get_or_404(question_id)
    content = request.form['content']
    user_id = current_user.id
    answer = models.Answer(content=content, user_id=user_id, question_id=question_id)
    db.session.add(answer)
    db.session.commit()
    return redirect(url_for('question', question_id=question_id))

@app.route('/climate-model-forum/question/<int:question_id>/delete', methods=['POST'])
@login_required
def delete_question(question_id):
    question = Question.query.get_or_404(question_id)
    if not current_user.admin:
        abort(403)

    answers = Answer.query.filter_by(question_id=question_id).all()
    for answer in answers:
        db.session.delete(answer)

    db.session.delete(question)
    db.session.commit()
    flash('Question has been deleted.', 'success')
    return redirect(url_for('climate_model_forum'))


@app.route('/climate-model-forum/question/<int:question_id>/delete-answer/<int:answer_id>', methods=['POST'])
@login_required
def delete_answer(question_id, answer_id):
    answer = Answer.query.get_or_404(answer_id)
    if current_user.admin:
        db.session.delete(answer)
        db.session.commit()
    return redirect(url_for('question', question_id=question_id))



@app.route("/account", methods=["GET", "POST"])
@login_required
def account():
    form_account = UpdateAccountForm(request.form, prefix="account")
    form_password = UpdatePasswordForm(request.form, prefix="password")

    if request.method == "POST":
        print("POST request received.")
        print("Request form data:", request.form)

        if 'submit' in request.form:
            form_account.submit.data = True

        if 'submit_password' in request.form:
            form_password.submit_password.data = True

    print("Account form submit data:", form_account.submit.data)  # Debugging line
    print("Password form submit data:", form_password.submit_password.data)  # Debugging line

    # ... (rest of the code remains the same)



    if form_account.submit.data:
        print("Account form submitted.")  # Debugging line
        if form_account.validate_on_submit():
            current_user.username = form_account.username.data
            current_user.email = form_account.email.data
            current_user.profile = form_account.profile.data
            current_user.notifications = form_account.notifications.data
            db.session.commit()
            flash("Your account has been updated.", "success")
            return redirect(url_for("account"))

    if form_password.submit_password.data:
        print("Password form submitted.")  # Debugging line
        if form_password.validate_on_submit():
            if bcrypt.check_password_hash(current_user.password, form_password.current_password.data):
                hashed_password = bcrypt.generate_password_hash(form_password.new_password.data).decode("utf-8")
                current_user.password = hashed_password
                db.session.commit()
                flash("Your password has been updated.", "success")
                return redirect(url_for("account"))
            else:
                flash("Incorrect current password.", "danger")
                print("Incorrect current password.")  # Debugging line
        else:
            print("Form data:", request.form)  # Debugging line
            print("Password form errors:", form_password.errors)  # Debugging line

    form_account.username.data = current_user.username
    form_account.email.data = current_user.email
    form_account.profile.data = current_user.profile
    form_account.notifications.data = current_user.notifications

    return render_template("account.html", title="Account", form_account=form_account, form_password=form_password)





if __name__ == '__main__':
    app.run(debug=True, use_reloader=False)
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
from app import app, db
from models import User
from models import Question


with app.app_context():
    existing_user = User.query.filter_by(email='newdummyuser@example.com').first()
    if existing_user:
        db.session.delete(existing_user)
        db.session.commit()
        print("User deleted.")
    else:
        print("No user found with the specified email.")

    dummy_user = User(name='DummyUser', email='newdummyuser@example.com', password='dummy_password', profile='Dummy Profile')
    db.session.add(dummy_user)
    db.session.commit()

    dummy_question = Question(title='Dummy Question', content='This is a dummy question.', user_id=dummy_user.id)
    db.session.add(dummy_question)
    db.session.commit()

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, TextAreaField, BooleanField
from wtforms.validators import DataRequired, Email, EqualTo, ValidationError, Length, Optional
from models import User
from flask_login import current_user



class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])
    profile = TextAreaField('Profile', validators=[Optional()])
    notifications = BooleanField('Receive notifications for new questions', default=True)
    submit = SubmitField('Sign Up')

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user:
            raise ValidationError('Username is already taken.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user:
            raise ValidationError('Email is already in use.')

class LoginForm(FlaskForm):
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

class UpdateAccountForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])
    email = StringField('Email', validators=[DataRequired(), Email()])
    profile = StringField('Profile', validators=[Length(max=500)])
    notifications = BooleanField('Notifications')
    submit = SubmitField('Update')

    def validate_username(self, username):
        if username.data != current_user.username:
            user = User.query.filter_by(username=username.data).first()
            if user:
                raise ValidationError('Username is already taken.')

    def validate_email(self, email):
        if email.data != current_user.email:
            user = User.query.filter_by(email=email.data).first()
            if user:
                raise ValidationError('Email is already in use.')

class UpdatePasswordForm(FlaskForm):
    current_password = PasswordField("Current Password", validators=[DataRequired()])
    new_password = PasswordField("New Password", validators=[DataRequired(), Length(min=6)])
    confirm_password = PasswordField("Confirm New Password", validators=[DataRequired()])
    submit_password = SubmitField("Update Password")

    def validate_confirm_password(self, confirm_password):
        if self.new_password.data != confirm_password.data:
            print("New passwords do not match.")
            raise ValidationError("New passwords must match.")from flask_script import Manager
from flask_migrate import Migrate, MigrateCommand
from app import app, db

manager = Manager(app)
migrate = Migrate(app, db)

manager.add_command('db', MigrateCommand)

if __name__ == '__main__':
    manager.run()
from database import db
from datetime import datetime
from flask_login import UserMixin  # Add this import

class User(db.Model, UserMixin):  # Add UserMixin here
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)  # Rename name to username and make it unique
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    profile = db.Column(db.String(200), nullable=True)
    notifications = db.Column(db.Boolean, default=True)
    admin = db.Column(db.Boolean, default=False)
    questions = db.relationship('Question', backref='author', lazy=True)
    answers = db.relationship('Answer', backref='author', lazy=True)

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    content = db.Column(db.Text, nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    answers = db.relationship('Answer', backref='question', lazy=True)

class Answer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.Text, nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    question_id = db.Column(db.Integer, db.ForeignKey('question.id'), nullable=False)
